{
  "name": "azure-storage",
  "author": {
    "name": "Microsoft Corporation"
  },
  "version": "0.4.2",
  "description": "Microsoft Azure Storage Client Library for Node.js",
  "tags": [
    "azure",
    "storage",
    "sdk"
  ],
  "keywords": [
    "node",
    "azure",
    "storage"
  ],
  "main": "./lib/azure-storage.js",
  "engines": {
    "node": ">= 0.8.26"
  },
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  ],
  "dependencies": {
    "xml2js": "0.2.7",
    "xmlbuilder": "0.4.3",
    "underscore": "~1.4.4",
    "request": "~2.27.0",
    "validator": "~3.1.0",
    "mime": "~1.2.4",
    "node-uuid": "~1.4.0",
    "extend": "~1.2.1",
    "readable-stream": "~1.0.0"
  },
  "devDependencies": {
    "mocha": ">= 1.18.0",
    "nock": "0.16",
    "jshint": ">= 2.1.4",
    "should": "1.2.x",
    "grunt": "~0.4.2",
    "grunt-jsdoc": "~0.5.1",
    "grunt-devserver": "~0.4.1"
  },
  "homepage": "http://github.com/Azure/azure-storage-node",
  "repository": {
    "type": "git",
    "url": "git@github.com:Azure/azure-storage-node.git"
  },
  "bugs": {
    "url": "http://github.com/Azure/azure-storage-node/issues"
  },
  "scripts": {
    "test": "jshint lib & mocha --no-timeouts --recursive test"
  },
  "readme": "# Microsoft Azure Storage SDK for Node.js \r\n\r\n[![NPM version](https://badge.fury.io/js/azure-storage.svg)](http://badge.fury.io/js/azure-storage)\r\n\r\nThis project provides a Node.js package that makes it easy to consume and manage Microsoft Azure Storage Services.\r\n\r\n> If you are looking for documentation for the Azure SDK for Node.js, see [http://dl.windowsazure.com/nodedocs/index.html](http://dl.windowsazure.com/nodedocs/index.html) or visit [https://github.com/Azure/azure-sdk-for-node](https://github.com/Azure/azure-sdk-for-node). While the Azure SDK for Node.js provides support for working with Azure Storage, you should consider using the Azure Storage SDK as it supports features not available in the Azure SDK for Node.js\r\n\r\n\r\n\r\n# Features\r\n\r\n- Tables\r\n    - Create/Delete Tables\r\n    - Query/Create/Read/Update/Delete Entities\r\n- Blobs\r\n    - Create/Read/Update/Delete Blobs\r\n- Files\r\n\t- Create/Update/Delete Directories\r\n\t- Create/Read/Update/Delete Files\r\n- Queues\r\n    - Create/Delete Queues\r\n    - Insert/Peek Queue Messages\r\n    - Advanced Queue Operations\r\n\t\r\n# Getting Started\r\n\r\n## Install\r\n\r\nnpm install azure-storage\r\n\r\n## Usage\r\n\r\nvar azure = require('azure-storage');\r\n\r\nWhen using the Storage SDK, you must provide connection information for the storage account to use. This can be provided using:\r\n\r\n* Environment variables - AZURE_STORAGE_ACCOUNT and AZURE_STORAGE_ACCESS_KEY, or AZURE_STORAGE_CONNECTION_STRING.\r\n\r\n* Constructors - For example, `var tableSvc = azure.createTableService(accountName, accountKey);`\r\n\r\n### Table Storage\r\n\r\nTo ensure a table exists, call **createTableIfNotExists**:\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar tableService = azure.createTableService();\r\ntableService.createTableIfNotExists('mytable', function(error, result, response){\r\n  if(!error){\r\n    // result contains true if created; false if already exists\r\n  }\r\n});\r\n```\r\nA new entity can be added by calling **insertEntity**:\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar tableService = azure.createTableService(),\r\nvar entGen = azure.TableUtilities.entityGenerator;\r\nvar entity = { \tPartitionKey: entGen.String('part2'),\r\n\t\t\t\tRowKey: entGen.String('row1'),\r\n\t\t\t\tboolValueTrue: entGen.Boolean(true),\r\n\t\t\t\tboolValueFalse: entGen.Boolean(false),\r\n\t\t\t\tintValue: entGen.Int32(42),\r\n\t\t\t\tdateValue: entGen.DateTime(new Date(Date.UTC(2011, 10, 25))),\r\n\t\t\t\tcomplexDateValue: entGen.DateTime(new Date(Date.UTC(2013, 02, 16, 01, 46, 20)))\r\n\t\t\t };\r\ntableService.insertEntity('mytable',entity, function (error, result, response) {\r\n  if(!error){\r\n    // result contains the ETag for the new entity\r\n  }\r\n});\r\n```\r\n\r\n\r\nInstead of creating entities manually, you can use **entityGenerator**:\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar entGen = azure.TableUtilities.entityGenerator;\r\nvar task = {\r\n  PartitionKey: entGen.String('hometasks'),\r\n  RowKey: entGen.String('1'),\r\n  description: entGen.String('take out the trash'),\r\n  dueDate: entGen.DateTime(new Date(Date.UTC(2015, 6, 20))),\r\n};\r\n```\r\n\r\nThe method **retrieveEntity** can then be used to fetch the entity that was just inserted:\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar tableService = azure.createTableService();\r\ntableService.retrieveEntity('mytable', 'part2', 'row1', function(error, result, response){\r\n  if(!error){\r\n    // result contains the entity\r\n  }\r\n});\r\n```\r\n\r\nUse **TableQuery** to build complex queries:\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar tableService = azure.createTableService();\r\nvar query = azure.TableQuery()\r\n\t\t    .top(5)\r\n\t\t    .where('PartitionKey eq ?', 'part2');\r\n\r\ntableSvc.queryEntities('mytable', query, null, function(error, result, response) {\r\n  if(!error) {\r\n    // result.entries contains entities matching the query\r\n  }\r\n});\r\n```\r\n\r\n### Blob Storage\r\n\r\nThe **createContainerIfNotExists** method can be used to create a\r\ncontainer in which to store a blob:\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar blobService = azure.createBlobService();\r\nblobService.createContainerIfNotExists('taskcontainer', {publicAccessLevel : 'blob'}, function(error, result, response){\r\n    if(!error){\r\n        // if result = true, container was created.\r\n        // if result = false, container already existed.\r\n    }\r\n});\r\n```\r\n\r\nTo upload a file (assuming it is called task1-upload.txt and it is placed in the same folder as the script below), the method **createBlockBlobFromLocalFile** can be used.\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar blobService = azure.createBlobService();\r\n\r\nblobService.createBlockBlobFromLocalFile('mycontainer', 'taskblob', 'task1-upload.txt', function(error, result, response){\r\n  if(!error){\r\n    // file uploaded\r\n  }\r\n});\r\n```\r\n\r\n\r\nFor page blobs, use **createPageBlobFromLocalFile**. There are other methods for uploading blobs also, such as **createBlockBlobFromText** or **createPageBlobFromStream**.\r\n\r\nThere are also several ways to download block and page blobs. For example, **getBlockBlobToStream** downloads the blob to a stream:\r\n  \r\n```Javascript\r\nvar blobService = azure.createBlobService();\r\nvar fs = require('fs');\r\nblobService.getBlockBlobToStream('mycontainer', 'taskblob', fs.createWriteStream('output.txt'), function(error, result, response){\r\n  if(!error) {\r\n    // blob retrieved\r\n  }\r\n});\r\n```\r\n\r\nTo create a Shared Access Signature (SAS), use the **generateSharedAccessSignature** method. Additionally you can use the **date** helper functions to easily create a SAS that expires at some point relative to the current time.\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar blobService = azure.createBlobService();\r\n\r\n\r\nvar startDate = new Date();\r\nvar expiryDate = new Date(startDate);\r\nexpiryDate.setMinutes(startDate.getMinutes() + 100);\r\nstartDate.setMinutes(startDate.getMinutes() - 100);\r\n\r\nvar sharedAccessPolicy = {\r\n    AccessPolicy: {\r\n      Permissions: azure.BlobUtilities.SharedAccessPermissions.READ,\r\n      Start: startDate,\r\n      Expiry: expiryDate\r\n  },\r\n};\r\n\r\nvar token = blobService.generateSharedAccessSignature(containerName, blobName, sharedAccessPolicy);\r\nvar sasUrl = blobService.getUrl(containerName, blobName, token);\r\n```\r\n\r\n### Queue Storage\r\n\r\nThe **createQueueIfNotExists** method can be used to ensure a queue exists:\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar queueService = azure.createQueueService();\r\nqueueService.createQueueIfNotExists('taskqueue', function(error){\r\n    if(!error){\r\n        // Queue exists\r\n    }\r\n});\r\n```\r\n\r\nThe **createMessage** method can then be called to insert the message into the queue:\r\n\r\n```Javascript\r\nvar queueService = azure.createQueueService();\r\nqueueService.createMessage('taskqueue', 'Hello world!', function(error){\r\n    if(!error){\r\n        // Message inserted\r\n    }\r\n});\r\n```\r\n\r\nIt is then possible to call the **getMessage** method, process the message and then call **deleteMessage** inside the callback. This two-step process ensures messages don't get lost when they are removed from the queue.\r\n\r\n```Javascript\r\nvar queueService = azure.createQueueService(),\r\n    queueName = 'taskqueue';\r\nqueueService.getMessages(queueName, function(error, serverMessages){\r\n    if(!error){\r\n        // Process the message in less than 30 seconds, the message\r\n        // text is available in serverMessages[0].messagetext\r\n\r\n        queueService.deleteMessage(queueName, serverMessages[0].messageid, serverMessages[0].popreceipt, function(error){\r\n            if(!error){\r\n                // Message deleted\r\n            }\r\n        });\r\n    }\r\n});\r\n```\r\n\r\n### File Storage\r\n\r\nThe **createShareIfNotExists** method can be used to create a\r\nshare in which to store a file or a directory of files:\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar fileService = azure.createFileService();\r\nfileService.createShareIfNotExists('taskshare', function(error, result, response){\r\n    if(!error){\r\n        // if result = true, share was created.\r\n        // if result = false, share already existed.\r\n    }\r\n});\r\n```\r\n\r\nTo create a directory, the method **createDirectoryIfNotExists** can be used.\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar fileService = azure.createFileService();\r\n\r\nfileService.createDirectoryIfNotExists('taskshare', 'taskdirectory', function(error, result, response){\r\n    if(!error){\r\n        // if result = true, share was created.\r\n        // if result = false, share already existed.\r\n    }\r\n});\r\n```\r\n\r\nTo upload a file (assuming it is called task1-upload.txt and it is placed in the same folder as the script below), the method **createFileFromLocalFile** can be used.\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar fileService = azure.createFileService();\r\n\r\nfileService.createFileFromLocalFile('taskshare', 'taskdirectory', 'taskfile', 'task1-upload.txt', function(error, result, response){\r\n  if(!error){\r\n    // file uploaded\r\n  }\r\n});\r\n```\r\n\r\nThere are other methods for uploading files also, such as **createFileFromText** or **createFileFromStream**.\r\n\r\nThere are also several ways to download files. For example, **getFileToStream** downloads the file to a stream:\r\n  \r\n```Javascript\r\nvar fileService = azure.createFileService();\r\nvar fs = require('fs');\r\nfileService.getFileToStream('taskshare', 'taskdirectory', 'taskfile', fs.createWriteStream('output.txt'), function(error, result, response){\r\n  if(!error) {\r\n    // file retrieved\r\n  }\r\n});\r\n```\r\n\r\n## Code Samples\r\n\r\nHow-Tos focused around accomplishing specific tasks are available on the [Microsoft Azure Node.js Developer Center](http://azure.microsoft.com/en-us/develop/nodejs/).\r\n\r\n* [How to use the Blob Service from Node.js](http://azure.microsoft.com/en-us/documentation/articles/storage-nodejs-how-to-use-blob-storage/)\r\n\r\n* [How to use the Table Service from Node.js](http://azure.microsoft.com/en-us/documentation/articles/storage-nodejs-how-to-use-table-storage/)\r\n\r\n* [How to use the Queue Service from Node.js](http://azure.microsoft.com/en-us/documentation/articles/storage-nodejs-how-to-use-queues/)\r\n\r\n# Running Tests\r\n\r\nIn order to run the tests, the following environment variables need to be set up:\r\n\r\nAZURE_STORAGE_CONNECTION_STRING=\"valid storage connection string\"\r\n\r\nor \r\n\r\nAZURE_STORAGE_ACCOUNT=\"valid storage account name\"\r\n\r\nAZURE_STORAGE_ACCESS_KEY=\"valid storage account key\"\r\n\r\nIn order to be able to use a proxy like fiddler, an additional environment variable should be set up:\r\n\r\nHTTP_PROXY=http://127.0.0.1:8888\r\n\r\nThe tests can then be run from the module's root directory using:\r\n\r\n`npm test`\r\n\r\n# Need Help?\r\n\r\nBe sure to check out the Microsoft Azure [Developer Forums on MSDN](http://go.microsoft.com/fwlink/?LinkId=234489) if you have trouble with the provided code or use StackOverflow.\r\n\r\n# Learn More\r\n\r\n- [Microsoft Azure Node.js Developer Center](http://azure.microsoft.com/en-us/develop/nodejs/)\r\n- [Azure Storage Team Blog] (http://blogs.msdn.com/b/windowsazurestorage/)\r\n\r\n# Contribute\r\n\r\nWe gladly accept community contributions.\r\n\r\n- Issues: Please report bugs using the Issues section of GitHub\r\n- Forums: Interact with the development teams on StackOverflow or the Microsoft Azure Forums\r\n- Source Code Contributions: If you would like to become an active contributor to this project please follow the instructions provided in [Microsoft Azure Projects Contribution Guidelines](http://azure.github.com/guidelines.html).\r\n\r\nFor general suggestions about Microsoft Azure please use our [UserVoice forum](http://feedback.azure.com/forums/34192--general-feedback).",
  "readmeFilename": "README.md",
  "_id": "azure-storage@0.4.2",
  "dist": {
    "shasum": "24cb33b210dec7e5fb3ad9fc09c3354baffc47b1"
  },
  "_from": "azure-storage@",
  "_resolved": "https://registry.npmjs.org/azure-storage/-/azure-storage-0.4.2.tgz"
}
