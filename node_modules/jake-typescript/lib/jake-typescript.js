/// <reference path="../typings/jake/jake.d.ts" />
var fs = require("fs");
var path = require("path");

(function (ModuleKind) {
    ModuleKind[ModuleKind["commonjs"] = 0] = "commonjs";
    ModuleKind[ModuleKind["amd"] = 1] = "amd";
})(exports.ModuleKind || (exports.ModuleKind = {}));
var ModuleKind = exports.ModuleKind;

(function (ESVersion) {
    ESVersion[ESVersion["ES3"] = 0] = "ES3";
    ESVersion[ESVersion["ES5"] = 1] = "ES5";
})(exports.ESVersion || (exports.ESVersion = {}));
var ESVersion = exports.ESVersion;

function isTsDeclarationFile(filename) {
    return filename.indexOf(".d.ts", filename.length - 5) !== -1;
}
exports.isTsDeclarationFile = isTsDeclarationFile;

function isTsFile(filename) {
    return filename.indexOf(".ts", filename.length - 3) !== -1;
}
exports.isTsFile = isTsFile;

var switchToForwardSlashesRegEx = /\\/g;
function switchToForwardSlashes(path) {
    return path.replace(switchToForwardSlashesRegEx, "/");
}

function extractSources(prereqs) {
    return prereqs.filter(function (prereq) {
        return exports.isTsFile(prereq);
    });
}

function convertOptions(options) {
    if (!options) {
        return "";
    }

    var optionString = "";

    if (options.generateDeclarationFile) {
        optionString += "--declaration ";
    }

    switch (options.moduleKind) {
        case 1 /* amd */:
            optionString += "--module amd ";
            break;

        case 0 /* commonjs */:
            optionString += "--module commonjs ";
            break;

        default:
            break;
    }

    if (options.noImplicitAny) {
        optionString += "--noImplicitAny ";
    }

    if (options.generateSourceMap) {
        optionString += "--sourceMap ";
    }

    if (options.mapRoot) {
        optionString += "--mapRoot " + options.mapRoot + " ";
    }

    if (options.removeComments) {
        optionString += "--removeComments ";
    }

    if (options.sourceRoot) {
        optionString += "--sourceRoot " + options.sourceRoot + " ";
    }

    switch (options.targetVersion) {
        case 0 /* ES3 */:
            optionString += "--target ES3 ";
            break;

        case 1 /* ES5 */:
            optionString += "--target ES5 ";
            break;

        default:
            break;
    }

    return optionString;
}

function executeTsc(name, outFiles, commandLine, failure) {
    var cmd = "tsc " + commandLine;
    console.log(cmd + "\n");

    var ex = jake.createExec([cmd]);

    ex.addListener("stdout", function (output) {
        process.stdout.write(output);
    });

    ex.addListener("stderr", function (error) {
        process.stderr.write(error);
    });

    ex.addListener("cmdEnd", function () {
        complete();
    });

    ex.addListener("error", function () {
        failure();
        console.log("Compilation of " + name + " failed.");
    });

    ex.run();
}

// This compiles a set of TypeScript files into a single JavaScript file
function singleFile(name, prereqs, opts) {
    var sources = extractSources(prereqs);
    var commandLine = convertOptions(opts);

    commandLine += "--out " + name + " " + sources.join(" ");

    var jakeOptions = { async: true };
    var task = file(name, prereqs, function () {
        executeTsc(name, [name], commandLine, function () {
            if (fs.existsSync(name)) {
                fs.unlinkSync(name);
            }
        });
    }, jakeOptions);

    return task;
}
exports.singleFile = singleFile;

function batchFiles(name, prereqs, opts) {
    var sources = extractSources(prereqs);
    var commandLine = convertOptions(opts);

    if (opts.outputDirectory) {
        commandLine += "--outDir " + opts.outputDirectory + " ";
    }

    commandLine += sources.join(" ");

    var builtFiles = [];

    sources.forEach(function (source) {
        if (!exports.isTsDeclarationFile(source)) {
            var builtFile = path.normalize((opts.outputDirectory || "./") + source.substr(0, source.length - 3) + ".js");

            // On Windows, normalize will use backslashes, which will mess up jake's matching
            builtFile = switchToForwardSlashes(builtFile);
            file(builtFile, prereqs, function () {
                batchCompileTask.invoke();
            });
            builtFiles.push(builtFile);
        }
    });

    var jakeOptions = { async: true };
    var batchCompileName = "batchCompile" + name;
    var batchCompileTask;
    namespace("jake-typescript", function () {
        desc("A task to do batch TypeScript compilation.");
        batchCompileTask = task(batchCompileName, function () {
            executeTsc(name, sources, commandLine, function () {
                builtFiles.forEach(function (outFile) {
                    if (fs.existsSync(outFile)) {
                        fs.unlinkSync(outFile);
                    }
                });
            });
        }, jakeOptions);
    });

    return task(name, builtFiles);
}
exports.batchFiles = batchFiles;
